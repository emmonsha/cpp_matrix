# src/Makefile
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Makefile –¥–ª—è Linux –∏ macOS —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º GTest

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–° ===
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S), Linux)
    OS = LINUX
else ifeq ($(UNAME_S), Darwin)
    OS = MACOS
else
    $(error Unsupported OS: $(UNAME_S))
endif

# === –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏ —Ñ–ª–∞–≥–∏ ===
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -pedantic -I.

# === –ü—É—Ç–∏ ===
BUILD_DIR = ./build
LIB = ./lib/libs21_matrix.a

# –í—Å–µ .cpp –≤ src, –∫—Ä–æ–º–µ —Ç–µ—Å—Ç–æ–≤ –∏ Makefile
SOURCES = $(wildcard ./*.cpp)
SOURCES := $(filter-out ./Makefile ./tests/%.cpp, $(SOURCES))
OBJECTS = $(SOURCES:./%.cpp=$(BUILD_DIR)/%.o)

# –¢–µ—Å—Ç—ã
TEST_SOURCES = $(wildcard ./tests/*.cpp)
TEST_OBJECTS = $(TEST_SOURCES:./tests/%.cpp=$(BUILD_DIR)/tests/%.o)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GTest –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–° ===

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
GTEST_LIB =
GTEST_INC =

# === Linux: –∏—Å–ø–æ–ª—å–∑—É–µ–º pkg-config, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω ===
ifeq ($(OS), LINUX)
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ pkg-config –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ gtest
    ifshell = $(shell pkg-config --exists gtest && echo yes)
    ifeq ($(ifshell), yes)
        GTEST_LIB := $(shell pkg-config --libs gtest gtest_main)
        GTEST_INC := $(shell pkg-config --cflags gtest gtest_main)
    else
        # –†–µ–∑–µ—Ä–≤: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏
        GTEST_LIB := -lgtest -lgtest_main -pthread
        GTEST_INC :=
    endif
endif

# === macOS: –∏—Å–ø–æ–ª—å–∑—É–µ–º Homebrew ===
ifeq ($(OS), MACOS)
    # –û–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–µ—Ñ–∏–∫—Å Homebrew
    BREW_PREFIX := $(shell brew --prefix 2>/dev/null)
    ifeq ($(BREW_PREFIX),)
        $(error "Homebrew not found. Please install Homebrew or GTest: brew install googletest")
    endif

    GTEST_INC := -I$(BREW_PREFIX)/include
    GTEST_LIB := -L$(BREW_PREFIX)/lib -lgtest -lgtest_main -pthread
endif

# –î–æ–±–∞–≤–ª—è–µ–º GTEST_INC –≤ CXXFLAGS
CXXFLAGS += $(GTEST_INC)

# === –¶–µ–ª–∏ ===
.PHONY: all test clean s21_matrix_oop.a

all: $(LIB)

# –°–±–æ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
$(LIB): $(OBJECTS)
	@mkdir -p $(dir $@)
	ar rcs $@ $^
	@echo "‚úÖ Static library created: $(LIB)"

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
$(BUILD_DIR)/%.o: ./%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@
	@echo "   [COMPILE] $<"

# –¢–µ—Å—Ç—ã
test: $(LIB) $(TEST_OBJECTS)
	$(CXX) $(CXXFLAGS) -o $(BUILD_DIR)/test $(TEST_OBJECTS) $(LIB) $(GTEST_LIB)
	@echo "üß™ Running unit tests..."
	$(BUILD_DIR)/test

$(BUILD_DIR)/tests/%.o: ./tests/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@
	@echo "   [TEST] $<"

s21_matrix_oop.a: $(LIB)

clean:
	rm -rf $(BUILD_DIR) $(LIB)
	@echo "üßπ Clean completed"

.PHONY: test all $(LIB) memcheck cppcheck

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ ===

.PHONY: memcheck cppcheck clang-tidy style

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
memcheck: test
	@echo "üîç Running Valgrind memory check..."
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./build/test

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: cppcheck
cppcheck:
	@echo "üîç Running cppcheck..."
	cppcheck \
		--enable=warning,performance,portability,style,information \
		--inconclusive \
		--std=c++17 \
		-I. \
		--suppress=missingIncludeSystem \
		--quiet \
		--error-exitcode=1 \
		$(wildcard *.cpp tests/*.cpp)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: clang-tidy
clang-tidy:
	@echo "üîç Running clang-tidy..."
	clang-tidy \
		$(wildcard *.cpp) \
		-header-filter='.*' \
		-- -I. -std=c++17

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cpplint)
.PHONY: format check-format

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–¥
format:
	@echo "‚ú® Formatting code with clang-format..."
	clang-format -i *.cpp *.h tests/*.cpp

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–¥ (–¥–ª—è CI)
check-format:
	@echo "üîç Checking code style with clang-format..."
	@echo "If output is empty ‚Äî code is well-formatted."
	clang-format --dry-run *.cpp *.h tests/*.cpp

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
diff-format:
	@echo "üìä Showing diff after formatting..."
	clang-format -output-replacements-xml *.cpp *.h tests/*.cpp | grep "<replacement "

.PHONY: check

check: test memcheck cppcheck clang-tidy check-format
	@echo "üéâ All checks passed! Code is clean, safe, and stylish."